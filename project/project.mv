# ./vl2mv project.v 
# version: 1.4
# date:    23:56:50 11/25/2017 (CST)
.model main 
# I/O ports
.outputs Y0
.inputs C0
.outputs Y1
.outputs XC
.inputs C1
.outputs Y2
.inputs C2
.inputs PAR
.outputs XE0
.outputs XE1
.outputs X0
.inputs B0
.outputs X1
.inputs B1
.outputs X2
.inputs B2
.outputs YE0
.outputs YC
.inputs A0
.outputs YE1
.inputs A1
.inputs A2
.subckt dumb_alu_tmr alu_tmr0 a0=A0  a1=A1  a2=A2  b0=B0  b1=B1  b2=B2  c0=C0  c1=C1  c2=C2  x0=x_out<0>  x1=x_out<1>  x2=x_out<2>  xc=xc_out  
.subckt dumb_alu_tmr alu_tmr1 a0=A0  a1=A1  a2=A2  b0=B0  b1=B1  b2=B2  c0=C0  c1=C1  c2=C2  x0=y_out<0>  x1=y_out<1>  x2=y_out<2>  xc=yc_out  
.subckt parity_onehot_trc input_trc_gen0 a0=A0  a1=A1  a2=A2  b0=B0  b1=B1  b2=B2  p=PAR  c0=C0  c1=C1  c2=C2  x=input_trc0<0>  xb=input_trc0<1>  
.subckt parity_onehot_trc input_trc_gen1 a0=A0  a1=A1  a2=A2  b0=B0  b1=B1  b2=B2  p=PAR  c0=C0  c1=C1  c2=C2  x=input_trc1<0>  xb=input_trc1<1>  
.subckt output_trc output_trc_gen0 a0=x_out<0>  a1=x_out<1>  a2=x_out<2>  aco=xc_out  b0=y_out<0>  b1=y_out<1>  b2=y_out<2>  bco=yc_out  x=output_trc<0>  xb=output_trc<1>  
.subckt trc final_trc_gen0 a=input_trc0<0>  ab=input_trc0<1>  b=output_trc<0>  bb=output_trc<1>  x=XE0  xb=XE1  
.subckt trc final_trc_gen1 a=input_trc1<0>  ab=input_trc1<1>  b=output_trc<0>  bb=output_trc<1>  x=YE0  xb=YE1  
# assign X0  = x_out [0]
.names x_out<0> X0$raw_n0
- =x_out<0>
# assign X1  = x_out [1]
.names x_out<1> X1$raw_n1
- =x_out<1>
# assign X2  = x_out [2]
.names x_out<2> X2$raw_n2
- =x_out<2>
# assign XC  = xc_out 
.names xc_out XC$raw_n3
- =xc_out
# assign Y0  = y_out [0]
.names y_out<0> Y0$raw_n4
- =y_out<0>
# assign Y1  = y_out [1]
.names y_out<1> Y1$raw_n5
- =y_out<1>
# assign Y2  = y_out [2]
.names y_out<2> Y2$raw_n6
- =y_out<2>
# assign YC  = yc_out 
.names yc_out YC$raw_n7
- =yc_out
# conflict arbitrators
.names Y0$raw_n4  Y0
0 0
1 1
.names Y1$raw_n5  Y1
0 0
1 1
.names XC$raw_n3  XC
0 0
1 1
.names Y2$raw_n6  Y2
0 0
1 1
.names X0$raw_n0  X0
0 0
1 1
.names X1$raw_n1  X1
0 0
1 1
.names X2$raw_n2  X2
0 0
1 1
.names YC$raw_n7  YC
0 0
1 1
# non-blocking assignments 
# latches
# quasi-continuous assignment
.end


.model dumb_alu_tmr 
# I/O ports
.inputs a0
.inputs a1
.inputs a2
.outputs xc
.inputs c0
.inputs c1
.inputs c2
.outputs x0
.inputs b0
.outputs x1
.inputs b1
.outputs x2
.inputs b2
.subckt dumb_alu alu0 a0=a0  a1=a1  a2=a2  b0=b0  b1=b1  b2=b2  c0=c0  c1=c1  c2=c2  x0=alu0_out<0>  x1=alu0_out<1>  x2=alu0_out<2>  xc=alu0_co  
.subckt dumb_alu alu1 a0=a0  a1=a1  a2=a2  b0=b0  b1=b1  b2=b2  c0=c0  c1=c1  c2=c2  x0=alu1_out<0>  x1=alu1_out<1>  x2=alu1_out<2>  xc=alu1_co  
.subckt dumb_alu alu2 a0=a0  a1=a1  a2=a2  b0=b0  b1=b1  b2=b2  c0=c0  c1=c1  c2=c2  x0=alu2_out<0>  x1=alu2_out<1>  x2=alu2_out<2>  xc=alu2_co  
.subckt maj3_voter_3bit data_voter a<0>=alu0_out<0> a<1>=alu0_out<1> a<2>=alu0_out<2>  b<0>=alu1_out<0> b<1>=alu1_out<1> b<2>=alu1_out<2>  c<0>=alu2_out<0> c<1>=alu2_out<1> c<2>=alu2_out<2>  v<0>=x_out<0> v<1>=x_out<1> v<2>=x_out<2>  
.subckt maj3_voter_1bit co_voter a=alu0_co  b=alu1_co  c=alu2_co  v=xc  
# assign x2  = x_out [2]
.names x_out<2> x2$raw_n8
- =x_out<2>
# assign x1  = x_out [1]
.names x_out<1> x1$raw_n9
- =x_out<1>
# assign x0  = x_out [0]
.names x_out<0> x0$raw_na
- =x_out<0>
# conflict arbitrators
.names x0$raw_na  x0
0 0
1 1
.names x1$raw_n9  x1
0 0
1 1
.names x2$raw_n8  x2
0 0
1 1
# non-blocking assignments 
# latches
# quasi-continuous assignment
.end


.model parity_onehot_trc 
# I/O ports
.inputs a0
.inputs p
.inputs a1
.outputs xb
.inputs a2
.inputs c0
.inputs c1
.inputs c2
.inputs b0
.inputs b1
.outputs x
.inputs b2
.subckt odd_parity_trc_gen parity_trc d0=a0  d1=a1  d2=a2  d3=b0  d4=b1  d5=b2  d6=p  trc0=trc_par<0>  trc1=trc_par<1>  
.subckt one_hot2two_rail_conv oh_trc_gen d0=c0  d1=c1  d2=c2  x=ctrl_trc_x<0>  xb=ctrl_trc_x<1>  y=ctrl_trc_y<0>  yb=ctrl_trc_y<1>  
.subckt trc oh_trc a=ctrl_trc_x<0>  ab=ctrl_trc_x<1>  b=ctrl_trc_y<0>  bb=ctrl_trc_y<1>  x=ctrl_trc<0>  xb=ctrl_trc<1>  
.subckt trc final_trc a=trc_par<0>  ab=trc_par<1>  b=ctrl_trc<0>  bb=ctrl_trc<1>  x=x  xb=xb  
# conflict arbitrators
# non-blocking assignments 
# latches
# quasi-continuous assignment
.end


.model output_trc 
# I/O ports
.inputs a0
.inputs aco
.inputs a1
.outputs xb
.inputs a2
.inputs bco
.inputs b0
.inputs b1
.outputs x
.inputs b2
.names b0 _nb
0 1  
1 0  
.names b1 _nc
0 1  
1 0  
.subckt trc trc_ab01 a=a0  ab=_nb  b=a1  bb=_nc  x=ab01_trc<0>  xb=ab01_trc<1>  
.names b2 _nd
0 1  
1 0  
.names bco _ne
0 1  
1 0  
.subckt trc trc_ab2co a=a2  ab=_nd  b=aco  bb=_ne  x=ab2co_trc<0>  xb=ab2co_trc<1>  
.subckt trc trc_final a=ab01_trc<0>  ab=ab01_trc<1>  b=ab2co_trc<0>  bb=ab2co_trc<1>  x=x  xb=xb  
# conflict arbitrators
# non-blocking assignments 
# latches
# quasi-continuous assignment
.end


.model trc 
# I/O ports
.outputs xb
.inputs bb
.inputs ab
.inputs a
.outputs x
.inputs b
# assign x  = (a  & b ) | (ab  & bb )
# a  & b 
.names a b _n10
.def 0
1 1 1
# ab  & bb 
.names ab bb _n11
.def 0
1 1 1
# (a  & b ) | (ab  & bb )
.names _n10 _n11 _n12
.def 1
0 0 0
.names _n12 x$raw_nf
- =_n12
# assign xb  = (a  & bb ) | (ab  & b )
# a  & bb 
.names a bb _n14
.def 0
1 1 1
# ab  & b 
.names ab b _n15
.def 0
1 1 1
# (a  & bb ) | (ab  & b )
.names _n14 _n15 _n16
.def 1
0 0 0
.names _n16 xb$raw_n13
- =_n16
# conflict arbitrators
.names xb$raw_n13  xb
0 0
1 1
.names x$raw_nf  x
0 0
1 1
# non-blocking assignments 
# latches
# quasi-continuous assignment
.end


.model rc 
# I/O ports
.outputs s<0> s<1> s<2> 
.inputs cin
.inputs a<0> a<1> a<2> 
.outputs cout
.inputs b<0> b<1> b<2> 
.subckt one_bit_adder a1 a0=a<0>  b0=b<0>  c0=cin  s0=s<0>  c1=t1  
.subckt one_bit_adder a2 a0=a<1>  b0=b<1>  c0=t1  s0=s<1>  c1=t2  
.subckt one_bit_adder a3 a0=a<2>  b0=b<2>  c0=t2  s0=s<2>  c1=cout  
# conflict arbitrators
# non-blocking assignments 
# latches
# quasi-continuous assignment
.end


.model one_bit_adder 
# I/O ports
.inputs a0
.inputs c0
.outputs c1
.outputs s0
.inputs b0
# assign s0  = a0  ^ b0  ^ c0 
# a0  ^ b0 
.names a0 b0 _n18
.def 0
0 1 1
1 0 1
# a0  ^ b0  ^ c0 
.names _n18 c0 _n19
.def 0
0 1 1
1 0 1
.names _n19 s0$raw_n17
- =_n19
# assign c1  = (a0  & b0 ) | (b0  & c0 ) | (c0  & a0 )
# a0  & b0 
.names a0 b0 _n1b
.def 0
1 1 1
# b0  & c0 
.names b0 c0 _n1c
.def 0
1 1 1
# (a0  & b0 ) | (b0  & c0 )
.names _n1b _n1c _n1d
.def 1
0 0 0
# c0  & a0 
.names c0 a0 _n1e
.def 0
1 1 1
# (a0  & b0 ) | (b0  & c0 ) | (c0  & a0 )
.names _n1d _n1e _n1f
.def 1
0 0 0
.names _n1f c1$raw_n1a
- =_n1f
# conflict arbitrators
.names c1$raw_n1a  c1
0 0
1 1
.names s0$raw_n17  s0
0 0
1 1
# non-blocking assignments 
# latches
# quasi-continuous assignment
.end


.model one_bit_half_adder 
# I/O ports
.outputs co
.outputs s
.inputs a
.inputs b
# assign s  = a  ^ b 
# a  ^ b 
.names a b _n21
.def 0
0 1 1
1 0 1
.names _n21 s$raw_n20
- =_n21
# assign co  = a  & b 
# a  & b 
.names a b _n23
.def 0
1 1 1
.names _n23 co$raw_n22
- =_n23
# conflict arbitrators
.names co$raw_n22  co
0 0
1 1
.names s$raw_n20  s
0 0
1 1
# non-blocking assignments 
# latches
# quasi-continuous assignment
.end


.model rc_improved 
# I/O ports
.outputs s<0> s<1> s<2> 
.inputs a<0> a<1> a<2> 
.outputs cout
.inputs b<0> b<1> b<2> 
.subckt one_bit_half_adder ha1 a=a<0>  b=b<0>  s=s<0>  co=t1  
.subckt one_bit_adder fa1 a0=a<1>  b0=b<1>  c0=t1  s0=s<1>  c1=t2  
.subckt one_bit_adder fa2 a0=a<2>  b0=b<2>  c0=t2  s0=s<2>  c1=cout  
# conflict arbitrators
# non-blocking assignments 
# latches
# quasi-continuous assignment
.end


.model rc_tmr 
# I/O ports
.outputs s<0> s<1> s<2> 
.inputs a<0> a<1> a<2> 
.outputs cout
.inputs b<0> b<1> b<2> 
.subckt one_bit_half_adder ha_0 a=a<0>  b=b<0>  s=ha0_s<0>  co=ha0_cout<0>  
.subckt one_bit_half_adder ha_1 a=a<0>  b=b<0>  s=ha0_s<1>  co=ha0_cout<1>  
.subckt one_bit_half_adder ha_2 a=a<0>  b=b<0>  s=ha0_s<2>  co=ha0_cout<2>  
.subckt maj3_voter_1bit mv_s0 a=ha0_s<0>  b=ha0_s<1>  c=ha0_s<2>  v=s<0>  
.subckt maj3_voter_1bit mv_cout0 a=ha0_cout<0>  b=ha0_cout<1>  c=ha0_cout<2>  v=ha0_cout_tmr  
.subckt one_bit_adder fa1_0 a0=a<1>  b0=b<1>  c0=ha0_cout_tmr  s0=fa1_s<0>  c1=fa1_cout<0>  
.subckt one_bit_adder fa1_1 a0=a<1>  b0=b<1>  c0=ha0_cout_tmr  s0=fa1_s<1>  c1=fa1_cout<1>  
.subckt one_bit_adder fa1_2 a0=a<1>  b0=b<1>  c0=ha0_cout_tmr  s0=fa1_s<2>  c1=fa1_cout<2>  
.subckt maj3_voter_1bit mv_s1 a=fa1_s<0>  b=fa1_s<1>  c=fa1_s<2>  v=s<1>  
.subckt maj3_voter_1bit mv_cout1 a=fa1_cout<0>  b=fa1_cout<1>  c=fa1_cout<2>  v=fa1_cout_tmr  
.subckt one_bit_adder fa2_0 a0=a<2>  b0=b<2>  c0=fa1_cout_tmr  s0=fa2_s<0>  c1=fa2_cout<0>  
.subckt one_bit_adder fa2_1 a0=a<2>  b0=b<2>  c0=fa1_cout_tmr  s0=fa2_s<1>  c1=fa2_cout<1>  
.subckt one_bit_adder fa2_2 a0=a<2>  b0=b<2>  c0=fa1_cout_tmr  s0=fa2_s<2>  c1=fa2_cout<2>  
.subckt maj3_voter_1bit mv_s2 a=fa2_s<0>  b=fa2_s<1>  c=fa2_s<2>  v=s<2>  
.subckt maj3_voter_1bit mv_cout2 a=fa2_cout<0>  b=fa2_cout<1>  c=fa2_cout<2>  v=cout  
# conflict arbitrators
# non-blocking assignments 
# latches
# quasi-continuous assignment
.end


.model maj3_voter_1bit 
# I/O ports
.inputs c
.outputs v
.inputs a
.inputs b
# assign v  = (a  & b ) | (a  & c ) | (b  & c )
# a  & b 
.names a b _n25
.def 0
1 1 1
# a  & c 
.names a c _n26
.def 0
1 1 1
# (a  & b ) | (a  & c )
.names _n25 _n26 _n27
.def 1
0 0 0
# b  & c 
.names b c _n28
.def 0
1 1 1
# (a  & b ) | (a  & c ) | (b  & c )
.names _n27 _n28 _n29
.def 1
0 0 0
.names _n29 v$raw_n24
- =_n29
# conflict arbitrators
.names v$raw_n24  v
0 0
1 1
# non-blocking assignments 
# latches
# quasi-continuous assignment
.end


.model twos_complement 
# I/O ports
.inputs a0
.inputs a1
.inputs a2
.outputs ab<0> ab<1> ab<2> 
# assign a_wire [0] = a0 
.names a0 a_wire$raw_n2a<0>
- =a0
.names _n2b
0
# assign a_wire [1] = a1 
.names a1 a_wire$raw_n2c<1>
- =a1
.names _n2d
0
# assign a_wire [2] = a2 
.names a2 a_wire$raw_n2e<2>
- =a2
.names _n2f
0
# assign my_one [2] = 0
.names my_one$raw_n30<2>
0
# assign my_one [1] = 0
.names my_one$raw_n31<1>
0
# assign my_one [0] = 1
.names my_one$raw_n32<0>
1
# assign a_flipped  = ~a_wire 
.names a_wire<0> _n34<0>
0 1  
1 0  
.names a_wire<1> _n34<1>
0 1  
1 0  
.names a_wire<2> _n34<2>
0 1  
1 0  
.names _n34<0> a_flipped$raw_n33<0>
- =_n34<0>
.names _n34<1> a_flipped$raw_n33<1>
- =_n34<1>
.names _n34<2> a_flipped$raw_n33<2>
- =_n34<2>
.subckt rc_improved add1 a<0>=a_flipped<0> a<1>=a_flipped<1> a<2>=a_flipped<2>  b<0>=my_one<0> b<1>=my_one<1> b<2>=my_one<2>  s<0>=ab<0> s<1>=ab<1> s<2>=ab<2>  cout=cout_dummy  
# conflict arbitrators
.names my_one$raw_n32<0>  my_one<0>
- =my_one$raw_n32<0>
.names my_one$raw_n31<1>  my_one<1>
- =my_one$raw_n31<1>
.names my_one$raw_n30<2>  my_one<2>
- =my_one$raw_n30<2>
.names a_flipped$raw_n33<0>  a_flipped<0>
- =a_flipped$raw_n33<0>
.names a_flipped$raw_n33<1>  a_flipped<1>
- =a_flipped$raw_n33<1>
.names a_flipped$raw_n33<2>  a_flipped<2>
- =a_flipped$raw_n33<2>
.names a_wire$raw_n2a<0>  a_wire<0>
- =a_wire$raw_n2a<0>
.names a_wire$raw_n2c<1>  a_wire<1>
- =a_wire$raw_n2c<1>
.names a_wire$raw_n2e<2>  a_wire<2>
- =a_wire$raw_n2e<2>
# non-blocking assignments 
# latches
# quasi-continuous assignment
.end


.model odd_parity_trc_gen 
# I/O ports
.inputs d0
.inputs d1
.inputs d2
.inputs d3
.inputs d4
.outputs trc1
.inputs d5
.outputs trc0
.inputs d6
# assign trc0  = d0  ^ d1  ^ d2  ^ d3 
# d0  ^ d1 
.names d0 d1 _n36
.def 0
0 1 1
1 0 1
# d0  ^ d1  ^ d2 
.names _n36 d2 _n37
.def 0
0 1 1
1 0 1
# d0  ^ d1  ^ d2  ^ d3 
.names _n37 d3 _n38
.def 0
0 1 1
1 0 1
.names _n38 trc0$raw_n35
- =_n38
# assign trc1  = d4  ^ d5  ^ d6 
# d4  ^ d5 
.names d4 d5 _n3a
.def 0
0 1 1
1 0 1
# d4  ^ d5  ^ d6 
.names _n3a d6 _n3b
.def 0
0 1 1
1 0 1
.names _n3b trc1$raw_n39
- =_n3b
# conflict arbitrators
.names trc1$raw_n39  trc1
0 0
1 1
.names trc0$raw_n35  trc0
0 0
1 1
# non-blocking assignments 
# latches
# quasi-continuous assignment
.end


.model one_hot2two_rail_conv 
# I/O ports
.outputs y
.inputs d0
.inputs d1
.inputs d2
.outputs xb
.outputs yb
.outputs x
# assign x  = (d0  & ~d1  & ~d2 ) | (~d0  & ~d1  & d2 )
.names d1 _n3d
0 1  
1 0  
# d0  & ~d1 
.names d0 _n3d _n3e
.def 0
1 1 1
.names d2 _n3f
0 1  
1 0  
# d0  & ~d1  & ~d2 
.names _n3e _n3f _n40
.def 0
1 1 1
.names d0 _n41
0 1  
1 0  
.names d1 _n42
0 1  
1 0  
# ~d0  & ~d1 
.names _n41 _n42 _n43
.def 0
1 1 1
# ~d0  & ~d1  & d2 
.names _n43 d2 _n44
.def 0
1 1 1
# (d0  & ~d1  & ~d2 ) | (~d0  & ~d1  & d2 )
.names _n40 _n44 _n45
.def 1
0 0 0
.names _n45 x$raw_n3c
- =_n45
# assign xb  = (~d0  & d1  & ~d2 )
.names d0 _n47
0 1  
1 0  
# ~d0  & d1 
.names _n47 d1 _n48
.def 0
1 1 1
.names d2 _n49
0 1  
1 0  
# ~d0  & d1  & ~d2 
.names _n48 _n49 _n4a
.def 0
1 1 1
.names _n4a xb$raw_n46
- =_n4a
# assign y  = (d0  & ~d1  & ~d2 ) | (~d0  & d1  & ~d2 )
.names d1 _n4c
0 1  
1 0  
# d0  & ~d1 
.names d0 _n4c _n4d
.def 0
1 1 1
.names d2 _n4e
0 1  
1 0  
# d0  & ~d1  & ~d2 
.names _n4d _n4e _n4f
.def 0
1 1 1
.names d0 _n50
0 1  
1 0  
# ~d0  & d1 
.names _n50 d1 _n51
.def 0
1 1 1
.names d2 _n52
0 1  
1 0  
# ~d0  & d1  & ~d2 
.names _n51 _n52 _n53
.def 0
1 1 1
# (d0  & ~d1  & ~d2 ) | (~d0  & d1  & ~d2 )
.names _n4f _n53 _n54
.def 1
0 0 0
.names _n54 y$raw_n4b
- =_n54
# assign yb  = (~d0  & ~d1  & d2 )
.names d0 _n56
0 1  
1 0  
.names d1 _n57
0 1  
1 0  
# ~d0  & ~d1 
.names _n56 _n57 _n58
.def 0
1 1 1
# ~d0  & ~d1  & d2 
.names _n58 d2 _n59
.def 0
1 1 1
.names _n59 yb$raw_n55
- =_n59
# conflict arbitrators
.names y$raw_n4b  y
0 0
1 1
.names xb$raw_n46  xb
0 0
1 1
.names yb$raw_n55  yb
0 0
1 1
.names x$raw_n3c  x
0 0
1 1
# non-blocking assignments 
# latches
# quasi-continuous assignment
.end


.model inversion_mux 
# I/O ports
.inputs a0
.inputs a1
.inputs a2
.outputs a_out<0> a_out<1> a_out<2> 
.inputs sel
# assign a_bus [0] = a0 
.names a0 a_bus$raw_n5a<0>
- =a0
.names _n5b
0
# assign a_bus [1] = a1 
.names a1 a_bus$raw_n5c<1>
- =a1
.names _n5d
0
# assign a_bus [2] = a2 
.names a2 a_bus$raw_n5e<2>
- =a2
.names _n5f
0
# assign a_inv_bus  = ~a_bus 
.names a_bus<0> _n61<0>
0 1  
1 0  
.names a_bus<1> _n61<1>
0 1  
1 0  
.names a_bus<2> _n61<2>
0 1  
1 0  
.names _n61<0> a_inv_bus$raw_n60<0>
- =_n61<0>
.names _n61<1> a_inv_bus$raw_n60<1>
- =_n61<1>
.names _n61<2> a_inv_bus$raw_n60<2>
- =_n61<2>
# assign a_out  = (sel  == 'b1) ? a_inv_bus  : (sel  == 'b0) ? a_bus  : 'b000z
.names _n64
1
# sel  == 'b1
.names sel _n64 _n65
.def 0
0 1 1
1 0 1
.names _n65 _n63
0 1  
1 0  
.names _n68
0
# sel  == 'b0
.names sel _n68 _n69
.def 0
0 1 1
1 0 1
.names _n69 _n67
0 1  
1 0  
.names _n6b<0>
0
.names _n6b<1>
0
.names _n6b<2>
0
.names _n6b<3>
0
# (sel  == 'b0) ? a_bus  : 'b000z
.names _n6b<0> _n6d<0>
- =_n6b<0>
.names _n6b<1> _n6d<1>
- =_n6b<1>
.names _n6b<2> _n6d<2>
- =_n6b<2>
.names a_bus<0> _n6d<0> _n67 _n6c<0>
0 - 1 0
1 - 1 1
- 0 0 0
- 1 0 1
.names a_bus<1> _n6d<1> _n67 _n6c<1>
0 - 1 0
1 - 1 1
- 0 0 0
- 1 0 1
.names a_bus<2> _n6d<2> _n67 _n6c<2>
0 - 1 0
1 - 1 1
- 0 0 0
- 1 0 1
# (sel  == 'b1) ? a_inv_bus  : (sel  == 'b0) ? a_bus  : 'b000z
.names a_inv_bus<0> _n6c<0> _n63 _n71<0>
0 - 1 0
1 - 1 1
- 0 0 0
- 1 0 1
.names a_inv_bus<1> _n6c<1> _n63 _n71<1>
0 - 1 0
1 - 1 1
- 0 0 0
- 1 0 1
.names a_inv_bus<2> _n6c<2> _n63 _n71<2>
0 - 1 0
1 - 1 1
- 0 0 0
- 1 0 1
.names _n71<0> a_out$raw_n62<0>
- =_n71<0>
.names _n71<1> a_out$raw_n62<1>
- =_n71<1>
.names _n71<2> a_out$raw_n62<2>
- =_n71<2>
# conflict arbitrators
.names a_bus$raw_n5a<0>  a_bus<0>
- =a_bus$raw_n5a<0>
.names a_bus$raw_n5c<1>  a_bus<1>
- =a_bus$raw_n5c<1>
.names a_bus$raw_n5e<2>  a_bus<2>
- =a_bus$raw_n5e<2>
.names a_out$raw_n62<0>  a_out<0>
- =a_out$raw_n62<0>
.names a_out$raw_n62<1>  a_out<1>
- =a_out$raw_n62<1>
.names a_out$raw_n62<2>  a_out<2>
- =a_out$raw_n62<2>
.names a_inv_bus$raw_n60<0>  a_inv_bus<0>
- =a_inv_bus$raw_n60<0>
.names a_inv_bus$raw_n60<1>  a_inv_bus<1>
- =a_inv_bus$raw_n60<1>
.names a_inv_bus$raw_n60<2>  a_inv_bus<2>
- =a_inv_bus$raw_n60<2>
# non-blocking assignments 
# latches
# quasi-continuous assignment
.end


.model MUX21 
# I/O ports
.outputs mux_out<0> mux_out<1> mux_out<2> 
.inputs a0<0> a0<1> a0<2> 
.inputs a1<0> a1<1> a1<2> 
.inputs sel
# assign mux_out  = (sel  == 'b1) ? a1  : (sel  == 'b0) ? a0  : 'b000z
.names _n77
1
# sel  == 'b1
.names sel _n77 _n78
.def 0
0 1 1
1 0 1
.names _n78 _n76
0 1  
1 0  
.names _n7b
0
# sel  == 'b0
.names sel _n7b _n7c
.def 0
0 1 1
1 0 1
.names _n7c _n7a
0 1  
1 0  
.names _n7e<0>
0
.names _n7e<1>
0
.names _n7e<2>
0
.names _n7e<3>
0
# (sel  == 'b0) ? a0  : 'b000z
.names _n7e<0> _n80<0>
- =_n7e<0>
.names _n7e<1> _n80<1>
- =_n7e<1>
.names _n7e<2> _n80<2>
- =_n7e<2>
.names a0<0> _n80<0> _n7a _n7f<0>
0 - 1 0
1 - 1 1
- 0 0 0
- 1 0 1
.names a0<1> _n80<1> _n7a _n7f<1>
0 - 1 0
1 - 1 1
- 0 0 0
- 1 0 1
.names a0<2> _n80<2> _n7a _n7f<2>
0 - 1 0
1 - 1 1
- 0 0 0
- 1 0 1
# (sel  == 'b1) ? a1  : (sel  == 'b0) ? a0  : 'b000z
.names a1<0> _n7f<0> _n76 _n84<0>
0 - 1 0
1 - 1 1
- 0 0 0
- 1 0 1
.names a1<1> _n7f<1> _n76 _n84<1>
0 - 1 0
1 - 1 1
- 0 0 0
- 1 0 1
.names a1<2> _n7f<2> _n76 _n84<2>
0 - 1 0
1 - 1 1
- 0 0 0
- 1 0 1
.names _n84<0> mux_out$raw_n75<0>
- =_n84<0>
.names _n84<1> mux_out$raw_n75<1>
- =_n84<1>
.names _n84<2> mux_out$raw_n75<2>
- =_n84<2>
# conflict arbitrators
.names mux_out$raw_n75<0>  mux_out<0>
- =mux_out$raw_n75<0>
.names mux_out$raw_n75<1>  mux_out<1>
- =mux_out$raw_n75<1>
.names mux_out$raw_n75<2>  mux_out<2>
- =mux_out$raw_n75<2>
# non-blocking assignments 
# latches
# quasi-continuous assignment
.end


.model dumb_alu 
# I/O ports
.inputs a0
.inputs a1
.inputs a2
.outputs xc
.inputs c0
.inputs c1
.inputs c2
.outputs x0
.inputs b0
.outputs x1
.inputs b1
.outputs x2
.inputs b2
.names c1 _n88
0 1  
1 0  
# c2  & ~c1 
.names c2 _n88 _n89
.def 0
1 1 1
.names c0 _n8a
0 1  
1 0  
# c2  & ~c1  & ~c0 
.names _n89 _n8a _n8b
.def 0
1 1 1
.subckt inversion_mux im0 a0=a0  a1=a1  a2=a2  sel=_n8b  a_out<0>=adder_in0<0> a_out<1>=adder_in0<1> a_out<2>=adder_in0<2>  
.names c2 _n8c
0 1  
1 0  
# ~c2  & c1 
.names _n8c c1 _n8d
.def 0
1 1 1
.names c0 _n8e
0 1  
1 0  
# ~c2  & c1  & ~c0 
.names _n8d _n8e _n8f
.def 0
1 1 1
.subckt inversion_mux im1 a0=b0  a1=b1  a2=b2  sel=_n8f  a_out<0>=adder_in1<0> a_out<1>=adder_in1<1> a_out<2>=adder_in1<2>  
# assign sub_sel  = ((!c0 ) & (c1 ) & (!c2 )) | ((!c0 ) & (!c1 ) & (c2 ))
.names c0 _n91
0 1  
1 0  
# (!c0 ) & (c1 )
.names _n91 c1 _n92
.def 0
1 1 1
.names c2 _n93
0 1  
1 0  
# (!c0 ) & (c1 ) & (!c2 )
.names _n92 _n93 _n94
.def 0
1 1 1
.names c0 _n95
0 1  
1 0  
.names c1 _n96
0 1  
1 0  
# (!c0 ) & (!c1 )
.names _n95 _n96 _n97
.def 0
1 1 1
# (!c0 ) & (!c1 ) & (c2 )
.names _n97 c2 _n98
.def 0
1 1 1
# ((!c0 ) & (c1 ) & (!c2 )) | ((!c0 ) & (!c1 ) & (c2 ))
.names _n94 _n98 _n99
.def 1
0 0 0
.names _n99 sub_sel$raw_n90
- =_n99
.subckt rc rc0 a<0>=adder_in0<0> a<1>=adder_in0<1> a<2>=adder_in0<2>  b<0>=adder_in1<0> b<1>=adder_in1<1> b<2>=adder_in1<2>  cin=sub_sel  s<0>=adder_out<0> s<1>=adder_out<1> s<2>=adder_out<2>  cout=xc  
# assign x0  = adder_out [0]
.names adder_out<0> x0$raw_n9a
- =adder_out<0>
# assign x1  = adder_out [1]
.names adder_out<1> x1$raw_n9b
- =adder_out<1>
# assign x2  = adder_out [2]
.names adder_out<2> x2$raw_n9c
- =adder_out<2>
# conflict arbitrators
.names sub_sel$raw_n90  sub_sel
0 0
1 1
.names x0$raw_n9a  x0
0 0
1 1
.names x1$raw_n9b  x1
0 0
1 1
.names x2$raw_n9c  x2
0 0
1 1
# non-blocking assignments 
# latches
# quasi-continuous assignment
.end


.model alu_improved 
# I/O ports
.inputs a0
.inputs a1
.inputs a2
.outputs xc
.inputs c0
.inputs c1
.inputs c2
.outputs x0
.inputs b0
.outputs x1
.inputs b1
.outputs x2
.inputs b2
# assign a_bus [0] = a0 
.names a0 a_bus$raw_n9d<0>
- =a0
.names _n9e
0
# assign a_bus [1] = a1 
.names a1 a_bus$raw_n9f<1>
- =a1
.names _na0
0
# assign a_bus [2] = a2 
.names a2 a_bus$raw_na1<2>
- =a2
.names _na2
0
# assign b_bus [0] = b0 
.names b0 b_bus$raw_na3<0>
- =b0
.names _na4
0
# assign b_bus [1] = b1 
.names b1 b_bus$raw_na5<1>
- =b1
.names _na6
0
# assign b_bus [2] = b2 
.names b2 b_bus$raw_na7<2>
- =b2
.names _na8
0
# assign sub_sela  = ~c0  & ~c1  & c2 
.names c0 _naa
0 1  
1 0  
.names c1 _nab
0 1  
1 0  
# ~c0  & ~c1 
.names _naa _nab _nac
.def 0
1 1 1
# ~c0  & ~c1  & c2 
.names _nac c2 _nad
.def 0
1 1 1
.names _nad sub_sela$raw_na9
- =_nad
# assign sub_selb  = ~c0  & c1  & ~c2 
.names c0 _naf
0 1  
1 0  
# ~c0  & c1 
.names _naf c1 _nb0
.def 0
1 1 1
.names c2 _nb1
0 1  
1 0  
# ~c0  & c1  & ~c2 
.names _nb0 _nb1 _nb2
.def 0
1 1 1
.names _nb2 sub_selb$raw_nae
- =_nb2
.subckt twos_complement tca a0=a0  a1=a1  a2=a2  ab<0>=a_inv<0> ab<1>=a_inv<1> ab<2>=a_inv<2>  
.subckt MUX21 muxa a0<0>=a_bus<0> a0<1>=a_bus<1> a0<2>=a_bus<2>  a1<0>=a_inv<0> a1<1>=a_inv<1> a1<2>=a_inv<2>  sel=sub_sela  mux_out<0>=adder_ina<0> mux_out<1>=adder_ina<1> mux_out<2>=adder_ina<2>  
.subckt twos_complement tc1 a0=b0  a1=b1  a2=b2  ab<0>=b_inv<0> ab<1>=b_inv<1> ab<2>=b_inv<2>  
.subckt MUX21 muxb a0<0>=b_bus<0> a0<1>=b_bus<1> a0<2>=b_bus<2>  a1<0>=b_inv<0> a1<1>=b_inv<1> a1<2>=b_inv<2>  sel=sub_selb  mux_out<0>=adder_inb<0> mux_out<1>=adder_inb<1> mux_out<2>=adder_inb<2>  
.subckt rc_improved rc0 a<0>=adder_ina<0> a<1>=adder_ina<1> a<2>=adder_ina<2>  b<0>=adder_inb<0> b<1>=adder_inb<1> b<2>=adder_inb<2>  s<0>=adder_out<0> s<1>=adder_out<1> s<2>=adder_out<2>  cout=xc  
# assign x0  = adder_out [0]
.names adder_out<0> x0$raw_nb3
- =adder_out<0>
# assign x1  = adder_out [1]
.names adder_out<1> x1$raw_nb4
- =adder_out<1>
# assign x2  = adder_out [2]
.names adder_out<2> x2$raw_nb5
- =adder_out<2>
# conflict arbitrators
.names sub_selb$raw_nae  sub_selb
0 0
1 1
.names a_bus$raw_n9d<0>  a_bus<0>
- =a_bus$raw_n9d<0>
.names a_bus$raw_n9f<1>  a_bus<1>
- =a_bus$raw_n9f<1>
.names a_bus$raw_na1<2>  a_bus<2>
- =a_bus$raw_na1<2>
.names b_bus$raw_na3<0>  b_bus<0>
- =b_bus$raw_na3<0>
.names b_bus$raw_na5<1>  b_bus<1>
- =b_bus$raw_na5<1>
.names b_bus$raw_na7<2>  b_bus<2>
- =b_bus$raw_na7<2>
.names x0$raw_nb3  x0
0 0
1 1
.names x1$raw_nb4  x1
0 0
1 1
.names sub_sela$raw_na9  sub_sela
0 0
1 1
.names x2$raw_nb5  x2
0 0
1 1
# non-blocking assignments 
# latches
# quasi-continuous assignment
.end


.model maj3_voter_3bit 
# I/O ports
.inputs c<0> c<1> c<2> 
.outputs v<0> v<1> v<2> 
.inputs a<0> a<1> a<2> 
.inputs b<0> b<1> b<2> 
.subckt maj3_voter_1bit mv0 a=a<0>  b=b<0>  c=c<0>  v=v<0>  
.subckt maj3_voter_1bit mv1 a=a<1>  b=b<1>  c=c<1>  v=v<1>  
.subckt maj3_voter_1bit mv2 a=a<2>  b=b<2>  c=c<2>  v=v<2>  
# conflict arbitrators
# non-blocking assignments 
# latches
# quasi-continuous assignment
.end


.model alu_improved_tmr 
# I/O ports
.inputs a0
.inputs a1
.inputs a2
.outputs xc
.inputs c0
.inputs c1
.inputs c2
.outputs x0
.inputs b0
.outputs x1
.inputs b1
.outputs x2
.inputs b2
.subckt alu_improved alu0 a0=a0  a1=a1  a2=a2  b0=b0  b1=b1  b2=b2  c0=c0  c1=c1  c2=c2  x0=alu0_out<0>  x1=alu0_out<1>  x2=alu0_out<2>  xc=alu0_co  
.subckt alu_improved alu1 a0=a0  a1=a1  a2=a2  b0=b0  b1=b1  b2=b2  c0=c0  c1=c1  c2=c2  x0=alu1_out<0>  x1=alu1_out<1>  x2=alu1_out<2>  xc=alu1_co  
.subckt alu_improved alu2 a0=a0  a1=a1  a2=a2  b0=b0  b1=b1  b2=b2  c0=c0  c1=c1  c2=c2  x0=alu2_out<0>  x1=alu2_out<1>  x2=alu2_out<2>  xc=alu2_co  
.subckt maj3_voter_3bit data_voter a<0>=alu0_out<0> a<1>=alu0_out<1> a<2>=alu0_out<2>  b<0>=alu1_out<0> b<1>=alu1_out<1> b<2>=alu1_out<2>  c<0>=alu2_out<0> c<1>=alu2_out<1> c<2>=alu2_out<2>  v<0>=x_out<0> v<1>=x_out<1> v<2>=x_out<2>  
.subckt maj3_voter_1bit co_voter a=alu0_co  b=alu1_co  c=alu2_co  v=xc  
# assign x2  = x_out [2]
.names x_out<2> x2$raw_nb6
- =x_out<2>
# assign x1  = x_out [1]
.names x_out<1> x1$raw_nb7
- =x_out<1>
# assign x0  = x_out [0]
.names x_out<0> x0$raw_nb8
- =x_out<0>
# conflict arbitrators
.names x0$raw_nb8  x0
0 0
1 1
.names x1$raw_nb7  x1
0 0
1 1
.names x2$raw_nb6  x2
0 0
1 1
# non-blocking assignments 
# latches
# quasi-continuous assignment
.end


